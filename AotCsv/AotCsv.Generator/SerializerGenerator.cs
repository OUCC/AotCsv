using System.Collections.Generic;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Oucc.AotCsv.Generator.Comparer;
using Oucc.AotCsv.Generator.Utility;

namespace Oucc.AotCsv.Generator;

[Generator(LanguageNames.CSharp)]
public partial class SerializerGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var attributeContext = context.SyntaxProvider.ForAttributeWithMetadataName(
            "Oucc.AotCsv.Attributes.CsvSerializableAttribute",
            static (_, _) => true,
            static (context, _) => context);

        var source = attributeContext.Combine(context.CompilationProvider).WithComparer(GeneratorComparer.Instance);

        context.RegisterSourceOutput(source, static (context, source) =>
        {
            var (attributeContext, compilation) = source;

            Emit(context, attributeContext, compilation);
        });
    }

    private static void Emit(SourceProductionContext context, GeneratorAttributeSyntaxContext source, Compilation compilation)
    {
        var targetSymbol = (INamedTypeSymbol)source.TargetSymbol;

        var builder = new StringBuilder();
        var reference = new ReferenceSymbols(compilation);

        builder.Append("""
            // <auto-generated/>

            """);

        if (!targetSymbol.ContainingNamespace.IsGlobalNamespace)
            builder.AppendFormatted($"namespace {targetSymbol.ContainingNamespace.ToString()};\n");

        builder.AppendFormatted($$"""

            partial {{(targetSymbol.IsRecord ? "record " : "")}}{{(targetSymbol.TypeKind == TypeKind.Class ? "class" : "struct")}} {{targetSymbol.Name}} : global::Oucc.AotCsv.ICsvSerializable<{{targetSymbol.Name}}>
            {
                static void global::Oucc.AotCsv.ICsvSerializable<{{targetSymbol.Name}}>.WriteHeader(global::System.IO.TextWriter writer, global::Oucc.AotCsv.CsvSerializeConfig context)
                {

            """);

        var targets = CreateHeaderCode(builder, targetSymbol, reference);

        builder.AppendFormatted($$"""
                }

                static void global::Oucc.AotCsv.ICsvSerializable<{{targetSymbol.Name}}>.WriteRecord(global::System.IO.TextWriter writer, global::Oucc.AotCsv.CsvSerializeConfig config, {{targetSymbol.Name}} value)
                {
            """);

        CreateBodyCode(builder, targetSymbol, targets, reference);

        builder.Append("""
                }
            }

            """);

        context.AddSource(targetSymbol.Name + ".g.cs", builder.ToString());
    }
}
